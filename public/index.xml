<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matias Pan</title>
    <link>https://blog.matiaspan.dev/</link>
    <description>Recent content on Matias Pan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.matiaspan.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Writing a face detection function for OpenFaaS</title>
      <link>https://blog.matiaspan.dev/posts/writing-a-face-detection-function-for-openfaas/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.matiaspan.dev/posts/writing-a-face-detection-function-for-openfaas/</guid>
      <description>There is a new term in town that has been making its way to all of us for a couple of years now: Serverless. When I first heard this I was kind of confused as to what it meant. Everybody seemed to have an opinion about it but there were no real answers. The following definition from serverless-stack helped me clarify a bit:
 Serverless computing (or serverless for short), is an execution model where the cloud provider is responsible for executing a piece of code by dynamically allocating the resources.</description>
    </item>
    
    <item>
      <title>Tracking color objects with GoCV</title>
      <link>https://blog.matiaspan.dev/posts/box-tracking-with-gocv/</link>
      <pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.matiaspan.dev/posts/box-tracking-with-gocv/</guid>
      <description>Disclaimer: this blog post is just a port of Adrian&amp;rsquo;s tutorial at pyimagesearch where he shows how to track a ball using Python and OpenCV. I only changed a few things here and there and rewrote it using Go and GoCV. So all the credit should go to him
I always prefer to start by showing what you&amp;rsquo;ll get if you stick to the end, so here it goes:</description>
    </item>
    
    <item>
      <title>Motion tracking turret with Gobot and GoCV - Part 1</title>
      <link>https://blog.matiaspan.dev/posts/motion-tracking-turret-with-gobot-and-gocv/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.matiaspan.dev/posts/motion-tracking-turret-with-gobot-and-gocv/</guid>
      <description>The title says it, motion tracking turret using only Go, ready to have some func?
This blog post will be divided into three main parts: Motion detection with GoCV, Controlling servo motors with Gobot and Putting it all together. In the first part, we build a lightweight motion detection algorithm that can run on low-power devices such as the RPi. In the second part we will show how to control servo motors with Gobot from the Raspberry Pi and in the last part we&amp;rsquo;ll explain how to go from detecting an object on an image to telling exactly the angles in which the servos need to move in order to track it.</description>
    </item>
    
    <item>
      <title>Deploying Gogs to a DigitalOcean Kubernetes cluster</title>
      <link>https://blog.matiaspan.dev/posts/deploying-gogs-to-a-custom-kubernetes-cluster/</link>
      <pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.matiaspan.dev/posts/deploying-gogs-to-a-custom-kubernetes-cluster/</guid>
      <description>In this post I will show step by step how to create a Kubernetes cluster on DigitalOcean and then deploy Gogs to the cluster using a set of tools that automate all this.
Creating the Cluster Choosing the Cloud Provider I chose DigitalOcean as the cloud provider since it&amp;rsquo;s the cheapest I could find and it has worked really well for me in the past, plus I was already familiar with a few of their products.</description>
    </item>
    
  </channel>
</rss>