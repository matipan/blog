<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on Matias Pan</title><link>https://blog.matiaspan.dev/categories/go/</link><description>Recent content in go on Matias Pan</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 22 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.matiaspan.dev/categories/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Fast JSON parsing in Go for OpenRTB</title><link>https://blog.matiaspan.dev/posts/fast-json-parsing-for-open-rtb/</link><pubDate>Sun, 22 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.matiaspan.dev/posts/fast-json-parsing-for-open-rtb/</guid><description>The code used for this test can be found here.
TL;DR: when looking into overall performance and usability, json-iter is the clear winner. It gives roughly a 4x improvement over encoding/json and 1.2x over the second most performant option. It is also extremely easy to use. You simply need to import it, define a global variable (that you can call json to make it even easier) and then use it like you would use encoding/json.</description></item><item><title>Writing a face detection function for OpenFaaS</title><link>https://blog.matiaspan.dev/posts/writing-a-face-detection-function-for-openfaas/</link><pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate><guid>https://blog.matiaspan.dev/posts/writing-a-face-detection-function-for-openfaas/</guid><description>There is a new term in town that has been making its way to all of us for a couple of years now: Serverless. When I first heard this I was kind of confused as to what it meant. Everybody seemed to have an opinion about it but there were no real answers. The following definition from serverless-stack helped me clarify a bit:
Serverless computing (or serverless for short), is an execution model where the cloud provider is responsible for executing a piece of code by dynamically allocating the resources.</description></item></channel></rss>